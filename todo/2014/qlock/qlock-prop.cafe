** ===============================================================
** ================ Property Specification =======================
** ===============================================================
require QLOCKsys qlock-sys.cafe
-- ===============================================================
-- for defining state functions and predicates we need
-- Peano Style Natural Numbers with _+_ and _>_
mod! PNAT {
  [Nat]
  op 0 : -> Nat {constr} .
  op s_ : Nat -> Nat {constr} .
 -- equality over the natural numbers
  eq (0 = s(Y:Nat)) = false .
  eq (s(X:Nat) = s(Y:Nat)) = (X = Y) .
  eq (s(X:Nat) = X) = false .
  -- associative and commutative _+_
  [Nat]
  op _+_ : Nat Nat -> Nat {assoc comm} .
  eq 0 + Y:Nat = Y .
  eq (s X:Nat) + Y:Nat = s(X + Y) .
  -- strict greater than
  op _>_ : Nat Nat -> Bool .
  eq (s X:Nat) > (s Y:Nat) = X > Y .
  eq (s X:Nat) > 0 = true .
  eq 0 > (s Y:Nat) = false .
  eq X:Nat > X = false .
--
  eq (s X:Nat) > X = true .
  eq X:Nat > (s X) = false .
}

mod* AID-QUEUE-a {ex(AID-QUEUE)
-- head
op hd_ : Qu -> Aid .
eq hd(E:Aid & Q:Qu) = E .
-- hd(empQ):Aid indicates an error element
-- and no equations for it; an error handling method
-- tail
op tl_ : Qu -> Qu .
eq tl(E:Aid & Q:Qu) = Q .
-- tl(empQ):Qu indicates an error queue
-- and no equations for it; an error handling method
}

** ===============================================================
-- elementary functions on states 
mod! STATEfuns {ex(STATE + PNAT)
-- the queue in a state
op qu : State -> Qu .
eq qu(Q:Qu $ AS:Aobs) = Q .
-- the agent observations in a state
op aos : State -> Aobs .
eq aos(Q:Qu $ AS:Aobs) = AS .
-- length of Aobs
op #laos : Aobs -> Nat .
eq #laos(empty) = 0 .
eq #laos(AS1:Aobs A:Aob AS2:Aobs) = (s 0) + #laos(AS1 AS2) .
-- the number of a label in a Aobs
op #lss : Aobs Label -> Nat .
eq #lss(empty,L:Label) = 0 .
eq #lss((AS1:Aobs (lb[A:Aid]: L1:Label) AS2:Aobs),L2:Label) = 
   if (L1 = L2) then (s 0) + #lss((AS1 AS2),L2) 
   else #lss((AS1 AS2),L2) fi .
-- the number of a label in a state
op #ls : State Label -> Nat .
eq #ls(S:State,L:Label) = #lss(aos(S),L) .
-- the number of an aid in a Aobs
op #ass : Aobs Aid -> Nat .
eq #ass(empty,A:Aid) = 0 .
eq #ass((AS1:Aobs (lb[A1:Aid]: L:Label) AS2:Aobs),A2:Aid) =
   if (A1 = A2) then (s 0) + #ass((AS1 AS2),A2) 
   else #ass((AS1 AS2),A2) fi .
-- the number of an aid in a state
op #as : State Aid -> Nat .
eq #as(S:State,A:Aid) = #ass(aos(S),A) .
-- the number of an aid in a queue
op #aq : Qu Aid -> Nat .
eq #aq(empQ,A:Aid) = 0 .
eq #aq(A1:Aid & Q:Qu,A2:Aid) =
   if (A1 = A2) then (s 0) + #aq(Q,A2) else #aq(Q,A2) fi .
-- label of an agent in a Aobs
op laga : Aobs Aid -> Label .
eq laga((AS1:Aobs (lb[A1:Aid]: L:Label) AS2:Aobs),A2:Aid) = 
   if (A1 = A2) then L else laga((AS1 AS2),A2) fi .
-- label of an agent in a State
op lags : State Aid -> Label .
eq lags(S:State,A:Aid) = laga(aos(S),A) .
}

-- ===============================================================
-- names of predicates on states and conjunction of the predicates
mod! PNAMEcj {pr(STATE)
-- names of predicates on States and sequences of them
[Pname < PnameSeq]
op (_ _) : PnameSeq PnameSeq -> PnameSeq {assoc} .
-- conjunction of predicates indicated in PnameSeq
op cj : PnameSeq State -> Bool .
eq cj(PN:Pname PNS:PnameSeq,S:State) = cj(PN,S) and cj(PNS,S) .
}

-- ===============================================================
-- predicates on states for well formed states and intitial states
mod! STATEpred-init {pr(STATEfuns) inc(PNAMEcj)
-- at least one agent in a state
op aoa : -> Pname .
eq[aoa]: cj(aoa,S:State) = (#laos(aos(S)) > 0) .
-- no duplication of an Aid in a Aobs
op 1as : Aobs -> Bool .
eq 1as(empty) = true .
eq 1as(AS1:Aobs (lb[A:Aid]: L:Label) AS2:Aobs) = 
   (#ass((AS1 AS2),A) = 0) and 1as(AS1 AS2) .
-- no duplication of an Aid in a state 
op 1a : -> Pname .
eq[1a]: cj(1a,S:State) = 1as(aos(S)) .
-- well formed states
op wfs : -> Pname .
eq[wfs]: wfs = aoa 1a .
-- the queue is empty
op qe : -> Pname .
eq[qe]: cj(qe,S:State) = (qu(S) = empQ) .
-- any Aid is in rs status, i.e. no ws, no cs
op allRs : -> Pname .
eq[allRs]: cj(allRs,S:State) = (#ls(S,ws)= 0) and (#ls(S,cs)= 0) .
}

-- ===============================================================
-- an initial state predicate
mod! INIT {pr(STATEpred-init)
op init : -> PnameSeq .
eq init = wfs qe allRs .
-- initial state predicate
pred init : State .
eq init(S:State) = cj(init,S) .
}

-- ===============================================================
-- predicates on states for an inductive invariant predicate
mod! STATEpred-inv {ex(STATEpred-init + AID-QUEUE-a)
-- mutual exclusion property: at most one agent is with cs
-- this is the goal predicate
op mx : -> Pname .
eq[mx]: cj(mx,S:State) = (#ls(S,cs) = 0) or (#ls(S,cs) = (s 0)) .
-- several fragment predicates for an inductive invariant
ops qep rs ws cs : -> Pname .
-- if queue is empty
eq[qep]: cj(qep,(Q:Qu $ (AS1:Aobs (lb[A:Aid]: L:Label) AS2:Aobs))) 
         = ((Q = empQ) implies 
            (#lss((AS1 (lb[A]: L) AS2),cs) = 0)) .
-- if agent is in rs
eq[:m-and rs]: cj(rs,(Q:Qu $ (AS1:Aobs (lb[A:Aid]: L:Label) 
                              AS2:Aobs)))
        = ((L = rs) implies (#aq(Q,A) = 0)) .
-- if agent is in ws
eq[:m-and ws]: cj(ws,(Q:Qu $ (AS1:Aobs (lb[A:Aid]: L:Label) 
                              AS2:Aobs))) 
        = ((L = ws) implies 
           ((#aq(Q,A) = (s 0)) and
            ((A = hd(Q)) implies (#lss((AS1 AS2),cs) = 0)))) .
** (A = hd(Q)) shields the error propagation

-- if agent is in cs
eq[:m-and cs]: cj(cs,(Q:Qu $ (AS1:Aobs (lb[A:Aid]: L:Label) 
                              AS2:Aobs))) 
        = ((L = cs) implies ((A = hd(Q)) and 
                             (#aq(tl(Q),A) = 0) and 
                             (#lss((AS1 AS2),cs) = 0))) .
** (A = hd(Q)) shields the error propagation
-- if cs then it should be top of the queue
op cst : -> Pname .
eq[cst]: cj(cst,(Q:Qu $ AS:Aobs)) 
        = ((#lss(AS,cs) > 0) and not(Q = empQ))
           implies (lags((Q:Qu $ AS:Aobs),hd(Q)) = cs) .
}

-- ===============================================================
-- a possible inductive invariant predicate
mod! INV {pr(STATEpred-inv)
op inv : -> PnameSeq .
eq inv = wfs mx qep rs ws cs cst .
pred inv : State .
eq inv(S:State) = cj(inv,S) .
}

-- ===============================================================
-- property specification of QLOCK
mod! QLOCKprop{pr(INIT + INV)}
-- ===============================================================

-- ===============================================================
-- enhancing Peano Style Natural Numbers 
-- for defining necessary new state functions 
mod! PNAT-a {pr(PNAT)
  -- associative and commutative _*_
  op _*_ : Nat Nat -> Nat {assoc comm} .
  eq 0 * Y:Nat = 0 .
  eq (s X:Nat) * Y:Nat = Y + (X * Y) . 
}

** ===============================================================
-- enhanced elementary functions on states 
mod! STATEfuns-a {pr(STATEfuns + PNAT-a) 
-- the depth of the first appearence of an aid in a queue
op #daq : Qu Aid -> Nat .
-- eq #daq(empQ,A:Aid) = 0 .
eq #daq(A1:Aid & Q:Qu,A2:Aid) = 
   if (A1 = A2) then 0 else s(#daq(Q,A2)) fi .

-- counter count of cs
op #ccs : State -> Nat .
eq #ccs(S:State) = if (#ls(S,cs) > 0) then 0 else (s 0) fi .
-- decreasing Nat measure for the lockout freedom verification
op #dms : State Aid -> Nat .
eq #dms(S:State,A:Aid) = ((s s s 0) * #daq(qu(S),A)) 
                          + #ls(S,rs) + #ccs(S) .
-- the transition:
-- (((b1 & q) $ (((lb [ b22 ] : ws) (lb [ b1 ] : cs)) as1)) ->
--         (q $ ((lb [ b1 ] : rs) ((lb [ b22 ] : ws) as1)))
-- increases (#ls(_,rs) + #ccs(_)) by (s s 0) 
-- decreases #daq(qu(_),b22)) by (s 0)
-- so we need ((s s s 0) * (s 0) = (s s s 0)) 
-- for proper decrease of #dms(_,b22)
}

-- ===============================================================
provide QLOCKprop
provide STATEfuns-a
-- ===============================================================
