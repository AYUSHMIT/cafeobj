-- set with associative list
mod! SET(X :: TRIV) {
  [Elt.X < Set]
  -- empty set
  op empty : -> Set {constr} .
  -- assicative set constructor with identity empty
  -- commutativity is intentionally dropped
  -- for efficient matchings and reductions
  op (_ _) : Set Set -> Set {constr assoc id: empty} .
  -- (_ _) is pseudo-idempotent with respect to the sort Elt
  -- eq S1:Set E:Elt S2:Set E S3:Set = S1 S2 E S3 .
}

open SET .
ops s1 s2 s3 s4 : -> Set .
ops e1 e2 e3 e4 : -> Elt .

eq (s1 s2) = s3 .
red s1 e1 s2 .
red s1 e1 e2 s2 .
red s1 e1 e2 e3 s2 .
red s1 s3 s2 .
red s1 s3 s4 s2 .

eof

-- the following returns expected result

close

open SET .
ops s1 s2 s3 s4 : -> Set .
ops e1 e2 e3 e4 : -> Elt .

eq (s1 s2 s3) = s4 .
red s1 e1 s2 s3 .
red s1 e1 e2 s2 s3 .
red s1 s2 e1 s3 .
red s1 s2 e1 e2 s3 .
red s1 s2 s4 s4 s3 .

-- the following returns expected result
red s1 e1 s2 e2 s3 .


-- close
