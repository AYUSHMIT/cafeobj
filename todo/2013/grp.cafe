mod* GROUP {
  [ G ]
  op 0 : -> G .
--  op _+_ : G G -> G { assoc comm } .
  op _+_ : G G -> G { assoc } .
  op -_ : G -> G .
  var X : G .
  eq[0left]  : 0 + X = X .
  eq[neginv] : (- X) + X = 0 .
}
open GROUP .
  op a : -> G .
  red a + ( - a ) .
close

open GROUP .
  op a : -> G .
  start a + ( - a ) .
  show tree
  apply -.0left at (1) .
  show tree
  apply -.neginv with X = - a at [1] .
  show tree
  apply +.neginv with X = a at [2 .. 3] .
  show tree
  apply reduce at term .
close
