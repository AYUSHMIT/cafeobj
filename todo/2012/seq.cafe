-- ============================================================
mod* TRIV= {
[Elt]
pred _=_ : Elt Elt {comm}
}

-- Sequence
mod! SEQ (X :: TRIV=) {
[Elt < Seq]
-- empty Sequence
op emp : -> Seq .
op (_ _) : Seq Seq -> Seq {constr assoc id: emp}
-- for the case if either side is emp and other side is non-emp
eq[1]: (emp = (S21:Seq E:Elt S22:Elt)) = false .
-- for the case if both sides are non-emp
ceq[2]: (S11:Seq E1:Elt S12:Seq = S21:Seq E2:Elt S22:Seq) =
                ((S11 = S21) and (E1 = E2) and (S12 = S22))
       if not((S11 = emp) and (S21 = emp) and
              (S12 = emp) and (S22 = emp)) .
}

open SEQ .
[EltLt < Elt]
eq (EL1:EltLt = EL2:EltLt) = (EL1 == EL2) .
ops e0 e1 : -> EltLt .

-- (1)
red emp = e1 .
-- (2)
red emp = e0 e1 .
-- (3)
red e0 = e0 e1 .
-- (4)
red e0 e1 = e0 e0 .
-- close
-- ============================================================
