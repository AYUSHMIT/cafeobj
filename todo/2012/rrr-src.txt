CafeOBJ> in todo/2012/121101matchingFail.cafe
processing input : todo/2012/121101matchingFail.cafe
-- defining module! BIT
[Warning]: redefining module BIT ..._
(checking sorts for regularity:)
(start checking operators : SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .b0 .b1 .)
.._
(checking sorts for regularity:)
(start checking operators : SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .b0 .b1 .Bit .BitLt .not .)
...* done.
-- defining module! NNUM
[Warning]: redefining module NNUM ...._
(checking sorts for regularity:)
(start checking operators : SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .)
......* done.
-- defining module! BN-PAIR
[Warning]: redefining module BN-PAIR _
(checking sorts for regularity:)
(start checking operators : NzNat .NatLt .Nat .p _ .s _ .0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .not .BitLt .Bit .b1 .b0 .)
*..._
(checking sorts for regularity:)
(start checking operators : b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .)
.._
(checking sorts for regularity:)
(start checking operators : b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .BNpair .1st .)
.._
(checking sorts for regularity:)
(start checking operators : b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .BNpair .1st .2nd .)
.* done.
-- defining module* TRIV=
[Warning]: redefining module TRIV= .
declaring overloading operator ((_ = _) . 2) : Elt Elt -> Bool
  ._
(checking sorts for regularity:)
(start checking operators : SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .)
.* done.
-- defining module* SEQ
[Warning]: redefining module SEQ _
(checking sorts for regularity:)
(start checking operators : )
*
declaring overloading operator ((_ = _) . 2) : Elt Elt -> Bool
  _
(checking sorts for regularity:)
(start checking operators : SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .Elt .)
*...._
(checking sorts for regularity:)
(start checking operators : Elt ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .emp ._ _ .)
............_
(checking sorts for regularity:)
(start checking operators : Elt ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .emp ._ _ .Seq .lhd .)
..._
(checking sorts for regularity:)
(start checking operators : Elt ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .emp ._ _ .Seq .lhd .rtl .)
..._
(checking sorts for regularity:)
(start checking operators : Elt ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .emp ._ _ .Seq .lhd .rtl .rhd .)
..._
(checking sorts for regularity:)
(start checking operators : Elt ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .emp ._ _ .Seq .lhd .rtl .rhd .ltl .)
.............* done.
-- defining module! NUM-SEQ
[Warning]: redefining module NUM-SEQ [,,s<oa][,,,s<oa]*.._
(checking sorts for regularity:)
(start checking operators : ltl .rhd .rtl .lhd ._ _ .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .Nseq .empN .mk .)
...* done.
-- defining module! RSCH
[Warning]: redefining module RSCH [,,s<oa][,,,s<oa]*._
(checking sorts for regularity:)
(start checking operators : ltl .rhd .rtl .lhd ._ _ .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .b0 .b1 .Bit .BitLt .not .RSch .empB .)
* done.
-- defining module! SRCH
[Warning]: redefining module SRCH [,,s<oa][,,,s<oa]*._
(checking sorts for regularity:)
(start checking operators : ltl .rhd .rtl .lhd ._ _ .b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .BNpair .1st .2nd .SRch .empBN .)
* done.
-- defining module* STATE
[Warning]: redefining module STATE ..........._
(checking sorts for regularity:)
(start checking operators : empBN .SRch .2nd .1st .BNpair .bn .NzNat .NatLt .Nat .p _ .s _ .0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .not .BitLt .Bit .b1 .b0 .mk .empN .Nseq .empB .RSch .lhd .rtl .rhd .ltl ._ _ .sBit: _ .sNum: _ .srCh: _ .rBit: _ .rNums: _ .rsCh: _ .)
* done.
-- defining module! EVENT
[Warning]: redefining module EVENT ........._
(checking sorts for regularity:)
(start checking operators : SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .ss .drSr .duSr .rr .rs .drRs .duRs .sr .)
.* done.
-- defining module* ABP
[Warning]: redefining module ABP .........._
(checking sorts for regularity:)
(start checking operators : Obs .State .rsCh: _ .rNums: _ .rBit: _ .srCh: _ .sNum: _ .sBit: _ .RSch .empB .Nseq .empN .mk .ltl .rhd .rtl .lhd ._ _ .b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .BNpair .1st .2nd .SRch .empBN .EventLt .Event .sr .duRs .drRs .rs .rr .duSr .drSr .ss .trans .)
............................* done.
-- defining module* TPP
[Warning]: redefining module TPP ..._
(checking sorts for regularity:)
(start checking operators : trans .ss .drSr .duSr .rr .rs .drRs .duRs .sr .Event .EventLt .empBN .SRch .2nd .1st .BNpair .bn .NzNat .NatLt .Nat .p _ .s _ .0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .not .BitLt .Bit .b1 .b0 .mk .empN .Nseq .empB .RSch .lhd .rtl .rhd .ltl ._ _ .sBit: _ .sNum: _ .srCh: _ .rBit: _ .rNums: _ .rsCh: _ .State .Obs .pre .post .)
* done.
-- defining module PPP
[Warning]: redefining module PPP _
(checking sorts for regularity:)
(start checking operators : )
*_
(checking sorts for regularity:)
(start checking operators : trans .ss .drSr .duSr .rr .rs .drRs .duRs .sr .Event .EventLt .empBN .SRch .2nd .1st .BNpair .bn .NzNat .NatLt .Nat .p _ .s _ .0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .not .BitLt .Bit .b1 .b0 .mk .empN .Nseq .empB .RSch .lhd .rtl .rhd .ltl ._ _ .sBit: _ .sNum: _ .srCh: _ .rBit: _ .rNums: _ .rsCh: _ .State .Obs .pre .post .)
*..._
(checking sorts for regularity:)
(start checking operators : post .pre .Obs .State .rsCh: _ .rNums: _ .rBit: _ .srCh: _ .sNum: _ .sBit: _ .RSch .empB .Nseq .empN .mk .ltl .rhd .rtl .lhd ._ _ .b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .BNpair .1st .2nd .SRch .empBN .EventLt .Event .sr .duRs .drRs .rs .rr .duSr .drSr .ss .trans .ppp .)
.* done.
-- defining module* TPPP
[Warning]: redefining module TPPP .._
(checking sorts for regularity:)
(start checking operators : trans .ss .drSr .duSr .rr .rs .drRs .duRs .sr .Event .EventLt .empBN .SRch .2nd .1st .BNpair .bn .NzNat .NatLt .Nat .p _ .s _ .0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .not .BitLt .Bit .b1 .b0 .mk .empN .Nseq .empB .RSch .lhd .rtl .rhd .ltl ._ _ .sBit: _ .sNum: _ .srCh: _ .rBit: _ .rNums: _ .rsCh: _ .State .Obs .ppp .)
* done.
-- defining module INDppp
[Warning]: redefining module INDppp _
(checking sorts for regularity:)
(start checking operators : )
*_
(checking sorts for regularity:)
(start checking operators : trans .ss .drSr .duSr .rr .rs .drRs .duRs .sr .Event .EventLt .empBN .SRch .2nd .1st .BNpair .bn .NzNat .NatLt .Nat .p _ .s _ .0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .not .BitLt .Bit .b1 .b0 .mk .empN .Nseq .empB .RSch .lhd .rtl .rhd .ltl ._ _ .sBit: _ .sNum: _ .srCh: _ .rBit: _ .rNums: _ .rsCh: _ .State .Obs .ppp .)
*......._
(checking sorts for regularity:)
(start checking operators : ppp .Obs .State .rsCh: _ .rNums: _ .rBit: _ .srCh: _ .sNum: _ .sBit: _ .RSch .empB .Nseq .empN .mk .ltl .rhd .rtl .lhd ._ _ .b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .BNpair .1st .2nd .SRch .empBN .EventLt .Event .sr .duRs .drRs .rs .rr .duSr .drSr .ss .trans .i ._ ,_ .mi _ .)
.* done.
-- defining module* MI
[Warning]: redefining module MI ......._
(checking sorts for regularity:)
(start checking operators : SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .i ._ ,_ .mi _ .)
* done.
-- defining module GENcss
[Warning]: redefining module GENcss _
(checking sorts for regularity:)
(start checking operators : )
*_
(checking sorts for regularity:)
(start checking operators : SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .i ._ ,_ .mi _ .Indicator .ValSq .Val .Event .State .)
*....
declaring overloading operator ((_ , _) . 2) : VtSq VtSq -> VtSq
  ....._
(checking sorts for regularity:)
(start checking operators : State .Event .Val .ValSq .Indicator .mi _ ._ ,_ .i ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr ._ ;; _ .{ _} ._ !!_ .fst1 _ .)
..._
(checking sorts for regularity:)
(start checking operators : State .Event .Val .ValSq .Indicator .mi _ ._ ,_ .i ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr ._ ;; _ .{ _} ._ !!_ .fst1 _ .VtSqTr .VtSqEn .VtSq .VlTr .rst1 _ .)
....._
(checking sorts for regularity:)
(start checking operators : State .Event .Val .ValSq .Indicator .mi _ ._ ,_ .i ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr ._ ;; _ .{ _} ._ !!_ .fst1 _ .VtSqTr .VtSqEn .VtSq .VlTr .rst1 _ .fst2 _ .)
..._
(checking sorts for regularity:)
(start checking operators : State .Event .Val .ValSq .Indicator .mi _ ._ ,_ .i ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr ._ ;; _ .{ _} ._ !!_ .fst1 _ .VtSqTr .VtSqEn .VtSq .VlTr .rst1 _ .fst2 _ .rst2 _ .)
..
-- (A)._
(checking sorts for regularity:)
(start checking operators : State .Event .Val .ValSq .Indicator .mi _ ._ ,_ .i ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr ._ ;; _ .{ _} ._ !!_ .fst1 _ .VtSqTr .VtSqEn .VtSq .VlTr .rst1 _ .fst2 _ .rst2 _ .getVsq _ .)
.._
(checking sorts for regularity:)
(start checking operators : State .Event .Val .ValSq .Indicator .mi _ ._ ,_ .i ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr ._ ;; _ .{ _} ._ !!_ .fst1 _ .VtSqTr .VtSqEn .VtSq .VlTr .rst1 _ .fst2 _ .rst2 _ .getVsq _ .true? .)
...
-- (B)._
(checking sorts for regularity:)
(start checking operators : State .Event .Val .ValSq .Indicator .mi _ ._ ,_ .i ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr ._ ;; _ .{ _} ._ !!_ .fst1 _ .VtSqTr .VtSqEn .VtSq .VlTr .rst1 _ .fst2 _ .rst2 _ .getVsq _ .true? .$ .check1by1 _ .)
.
-- (C)..* done.
-- defining module SRCHprop
[Warning]: redefining module SRCHprop ...._
(checking sorts for regularity:)
(start checking operators : empBN .SRch .2nd .1st .BNpair .bn .NzNat .NatLt .Nat .p _ .s _ .0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .not .BitLt .Bit .b1 .b0 ._ _ .lhd .rtl .rhd .ltl .zeroD .)
....._
(checking sorts for regularity:)
(start checking operators : empBN .SRch .2nd .1st .BNpair .bn .NzNat .NatLt .Nat .p _ .s _ .0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .not .BitLt .Bit .b1 .b0 ._ _ .lhd .rtl .rhd .ltl .zeroD .oneD .)
......_
(checking sorts for regularity:)
(start checking operators : empBN .SRch .2nd .1st .BNpair .bn .NzNat .NatLt .Nat .p _ .s _ .0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .not .BitLt .Bit .b1 .b0 ._ _ .lhd .rtl .rhd .ltl .zeroD .oneD .)
...........................* done.
-- defining module RSCHprop
[Warning]: redefining module RSCHprop .._
(checking sorts for regularity:)
(start checking operators : empB .RSch .not .BitLt .Bit .b1 .b0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr ._ _ .lhd .rtl .rhd .ltl .zeroC .)
....._
(checking sorts for regularity:)
(start checking operators : empB .RSch .not .BitLt .Bit .b1 .b0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr ._ _ .lhd .rtl .rhd .ltl .zeroC .oneC .)
....
-- zero-p1..
-- zero-p2..
-- zero-p3..
-- zero-p4..
-- zero-p5..
-- one-p1..
-- one-p2..
-- one-p3..
-- one-p4..
-- one-p5..
-- one-p6..
-- one-p7..
-- one-p-11..
-- one-p-12..* done.
-- defining module* ABPprop
[Warning]: redefining module ABPprop ..........._
(checking sorts for regularity:)
(start checking operators : trans .ss .drSr .duSr .rr .rs .drRs .duRs .sr .Event .EventLt .empBN .SRch .2nd .1st .BNpair .bn .NzNat .NatLt .Nat .p _ .s _ .0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .not .BitLt .Bit .b1 .b0 .mk .empN .Nseq .empB .RSch .lhd .rtl .rhd .ltl ._ _ .sBit: _ .sNum: _ .srCh: _ .rBit: _ .rNums: _ .rsCh: _ .State .Obs .oneD .zeroD .oneC .zeroC .p1 .)
.* done.
-- defining module CHKcss
[Warning]: redefining module CHKcss _
(checking sorts for regularity:)
(start checking operators : )
*_
(checking sorts for regularity:)
(start checking operators : trans .ss .drSr .duSr .rr .rs .drRs .duRs .sr .Event .EventLt .empBN .SRch .2nd .1st .BNpair .bn .NzNat .NatLt .Nat .p _ .s _ .0 ._ iff_ ._ implies_ .not _ ._ xor_ ._ or-else_ ._ or_ ._ and-also_ ._ and_ ._ =_ .Bool .true .false ._ :is_ .if _then _else _fi ._ ==_ ._ =*=_ ._ =b=_ ._ =/=_ ._ :=_ .parsed:[ _], rest:[_ ] .SortId .TypeErr .SyntaxErr .not .BitLt .Bit .b1 .b0 .mk .empN .Nseq .empB .RSch .lhd .rtl .rhd .ltl ._ _ .sBit: _ .sNum: _ .srCh: _ .rBit: _ .rNums: _ .rsCh: _ .State .Obs .pre .post .)
*.[,,s<oa][*,,s<oa][*,,s<
declaring overloading operator ((_ , _) . 2) : VtSq VtSq -> VtSq
  oa]*._
(checking sorts for regularity:)
(start checking operators : post .pre .Obs .State .rsCh: _ .rNums: _ .rBit: _ .srCh: _ .sNum: _ .sBit: _ .RSch .empB .Nseq .empN .mk .ltl .rhd .rtl .lhd ._ _ .b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .BNpair .1st .2nd .SRch .empBN .EventLt .Event .sr .duRs .drRs .rs .rr .duSr .drSr .ss .trans .check1by1 _ .$ .true? .getVsq _ .rst2 _ .fst2 _ .rst1 _ .VlTr .VtSq .VtSqEn .VtSqTr .fst1 _ ._ !!_ .{ _} ._ ;; _ .ppp .i ._ ,_ .mi _ .ValSq .Val .Indicator .)
...* done.[[[[,,s<oa]*,,s<oa]*,,s<
declaring overloading operator ((_ , _) . 2) : VtSq VtSq -> VtSq
  oa]*,,s<oa]
-- opening module CHKcss(TS <= ABPprop{op post -> p1,op pre -> p1 }).
(checking sorts for regularity:)
(start checking operators : )
(checking sorts for regularity:)
(start checking operators : p1 .zeroC .oneC .zeroD .oneD .Obs .State .rsCh: _ .rNums: _ .rBit: _ .srCh: _ .sNum: _ .sBit: _ .RSch .empB .Nseq .empN .mk .ltl .rhd .rtl .lhd ._ _ .b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .BNpair .1st .2nd .SRch .empBN .EventLt .Event .sr .duRs .drRs .rs .rr .duSr .drSr .ss .trans .check1by1 _ .$ .true? .getVsq _ .rst2 _ .fst2 _ .rst1 _ .VlTr .VtSq .VtSqEn .VtSqTr .fst1 _ ._ !!_ .{ _} ._ ;; _ .ppp .i ._ ,_ .mi _ .ValSq .Val .Indicator .)
. done.
--> okay for ss and rs_
(checking sorts for regularity:)
(start checking operators : p1 .zeroC .oneC .zeroD .oneD .Obs .State .rsCh: _ .rNums: _ .rBit: _ .srCh: _ .sNum: _ .sBit: _ .RSch .empB .Nseq .empN .mk .ltl .rhd .rtl .lhd ._ _ .b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .BNpair .1st .2nd .SRch .empBN .EventLt .Event .sr .duRs .drRs .rs .rr .duSr .drSr .ss .trans .check1by1 _ .$ .true? .getVsq _ .rst2 _ .fst2 _ .rst1 _ .VlTr .VtSq .VtSqEn .VtSqTr .fst1 _ ._ !!_ .{ _} ._ ;; _ .ppp .i ._ ,_ .mi _ .ValSq .Val .Indicator .bv1 .bv2 .nv .src .ns .rsc .)
*
-- reduce in %CHKcss(TS <= ABPprop{ ... }) : (check1by1 ({ (bv1 , (nv , (src , (bv2 , (ns , (rsc , (ss ; ; rs))))))) })):Indicator
($):Indicator
(0.000 sec for parse, 215 rewrites(0.110 sec), 11190 matches)
[[[[,,s<oa]*,,s<oa]*,,s<
declaring overloading operator ((_ , _) . 2) : VtSq VtSq -> VtSq
  oa]*,,s<oa]
-- opening module CHKcss(TS <= ABPprop{op post -> p1,op pre -> p1 }).
(checking sorts for regularity:)
(start checking operators : )
(checking sorts for regularity:)
(start checking operators : p1 .zeroC .oneC .zeroD .oneD .Obs .State .rsCh: _ .rNums: _ .rBit: _ .srCh: _ .sNum: _ .sBit: _ .RSch .empB .Nseq .empN .mk .ltl .rhd .rtl .lhd ._ _ .b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .BNpair .1st .2nd .SRch .empBN .EventLt .Event .sr .duRs .drRs .rs .rr .duSr .drSr .ss .trans .check1by1 _ .$ .true? .getVsq _ .rst2 _ .fst2 _ .rst1 _ .VlTr .VtSq .VtSqEn .VtSqTr .fst1 _ ._ !!_ .{ _} ._ ;; _ .ppp .i ._ ,_ .mi _ .ValSq .Val .Indicator .)
. done.
_
(checking sorts for regularity:)
(start checking operators : p1 .zeroC .oneC .zeroD .oneD .Obs .State .rsCh: _ .rNums: _ .rBit: _ .srCh: _ .sNum: _ .sBit: _ .RSch .empB .Nseq .empN .mk .ltl .rhd .rtl .lhd ._ _ .b0 .b1 .Bit .BitLt .not .SyntaxErr .TypeErr .SortId .parsed:[ _], rest:[_ ] ._ :=_ ._ =/=_ ._ =b=_ ._ =*=_ ._ ==_ .if _then _else _fi ._ :is_ .false .true .Bool ._ =_ ._ and_ ._ and-also_ ._ or_ ._ or-else_ ._ xor_ .not _ ._ implies_ ._ iff_ .0 .s _ .p _ .Nat .NatLt .NzNat .bn .BNpair .1st .2nd .SRch .empBN .EventLt .Event .sr .duRs .drRs .rs .rr .duSr .drSr .ss .trans .check1by1 _ .$ .true? .getVsq _ .rst2 _ .fst2 _ .rst1 _ .VlTr .VtSq .VtSqEn .VtSqTr .fst1 _ ._ !!_ .{ _} ._ ;; _ .ppp .i ._ ,_ .mi _ .ValSq .Val .Indicator .bv1 .bv2 .bv3 .nv1 .nv2 .src1 .src2 .ns .rsc .)
*
-- reduce in %CHKcss(TS <= ABPprop{ ... }) : (check1by1 ({ (bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , (drSr ; ; duSr))))))) })):Indicator
(if true?((mi (getVsq ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) })))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
(0.000 sec for parse, 562 rewrites(0.200 sec), 22600 matches)
-- reduce in %CHKcss(TS <= ABPprop{ ... }) : (if true?((mi (getVsq ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) })))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[1(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[2(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[3(cond)]: (true xor true):Bool
   --> (false):Bool
[4(cond)]: (not (drSr :is Val)):Bool
   --> ((drSr :is Val) xor true):Bool
[5(cond)]: ((drSr :is Val) xor true):Bool
   --> (true xor true):Bool
[6(cond)]: (true xor true):Bool
   --> (false):Bool
[7(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[8(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[9(cond)]: (true xor true):Bool
   --> (false):Bool
[10(cond)]: (not ((src1 (bn(bv2,nv2) src2)) :is Val)):Bool
   --> (((src1 (bn(bv2,nv2) src2)) :is Val) xor true):Bool
[11(cond)]: (((src1 (bn(bv2,nv2) src2)) :is Val) xor true):Bool
   --> (true xor true):Bool
[12(cond)]: (true xor true):Bool
   --> (false):Bool
[13(cond)]: (not (bv3 :is Val)):Bool
   --> ((bv3 :is Val) xor true):Bool
[14(cond)]: ((bv3 :is Val) xor true):Bool
   --> (true xor true):Bool
[15(cond)]: (true xor true):Bool
   --> (false):Bool
[16(cond)]: (not (ns :is Val)):Bool
   --> ((ns :is Val) xor true):Bool
[17(cond)]: ((ns :is Val) xor true):Bool
   --> (true xor true):Bool
[18(cond)]: (true xor true):Bool
   --> (false):Bool
[19(cond)]: (not (rsc :is Val)):Bool
   --> ((rsc :is Val) xor true):Bool
[20(cond)]: ((rsc :is Val) xor true):Bool
   --> (true xor true):Bool
[21(cond)]: (true xor true):Bool
   --> (false):Bool
[22]: (if true?((mi (getVsq ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) })))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?((mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[23]: (if true?((mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[24]: (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[25]: (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[26]: (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[27]: (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[28(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[29(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[30(cond)]: (true xor true):Bool
   --> (false):Bool
[31]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[32]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[33]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[34]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[35]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[36]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[37]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[38]: (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[39]: (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[40]: (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[41]: (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[42]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[43]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[44]: (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[45]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[46]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[47]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[48]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[49]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[50]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[51]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[52]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[53]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[54]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[55]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[56]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[57]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[58]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(((srCh: (src1 src2)) ((sBit: bv1) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc)))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[59]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1((((srCh: (src1 src2)) (sBit: bv1)) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[60]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[61(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[62(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[63(cond)]: (true xor true):Bool
   --> (false):Bool
[64]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[65]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[66]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[67]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[68]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[69]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[70]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[71]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[72]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[73]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[74]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[75]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[76]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[77]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[78]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[79]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[80]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[81]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[82]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[83]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[84]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[85]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[86]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[87]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[88]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[89]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[90]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[91]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[92]: (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[93]: (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[94]: (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),drSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if (true == true) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[95]: (if (true == true) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (if true then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
[96]: (if true then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }))))) fi):Indicator
---> (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))):Indicator
[97(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[98(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[99(cond)]: (true xor true):Bool
   --> (false):Bool
[100(cond)]: (not (drSr :is Val)):Bool
   --> ((drSr :is Val) xor true):Bool
[101(cond)]: ((drSr :is Val) xor true):Bool
   --> (true xor true):Bool
[102(cond)]: (true xor true):Bool
   --> (false):Bool
[103(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[104(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[105(cond)]: (true xor true):Bool
   --> (false):Bool
[106(cond)]: (not ((src1 (bn(bv2,nv2) src2)) :is Val)):Bool
   --> (((src1 (bn(bv2,nv2) src2)) :is Val) xor true):Bool
[107(cond)]: (((src1 (bn(bv2,nv2) src2)) :is Val) xor true):Bool
   --> (true xor true):Bool
[108(cond)]: (true xor true):Bool
   --> (false):Bool
[109(cond)]: (not (bv3 :is Val)):Bool
   --> ((bv3 :is Val) xor true):Bool
[110(cond)]: ((bv3 :is Val) xor true):Bool
   --> (true xor true):Bool
[111(cond)]: (true xor true):Bool
   --> (false):Bool
[112(cond)]: (not (ns :is Val)):Bool
   --> ((ns :is Val) xor true):Bool
[113(cond)]: ((ns :is Val) xor true):Bool
   --> (true xor true):Bool
[114(cond)]: (true xor true):Bool
   --> (false):Bool
[115(cond)]: (not (rsc :is Val)):Bool
   --> ((rsc :is Val) xor true):Bool
[116(cond)]: ((rsc :is Val) xor true):Bool
   --> (true xor true):Bool
[117(cond)]: (true xor true):Bool
   --> (false):Bool
[118]: (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })))):Indicator
---> (check1by1 (if (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) :is VtSqEn) then ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }) else ((rst2 ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) })) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })) fi)):Indicator
[119]: (check1by1 (if (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) }) :is VtSqEn) then ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }) else ((rst2 ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) })) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })) fi)):Indicator
---> (check1by1 (if true then ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }) else ((rst2 ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) })) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })) fi)):Indicator
[120]: (check1by1 (if true then ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) }) else ((rst2 ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , drSr))))) })) !! ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })) fi)):Indicator
---> (check1by1 ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })):Indicator
[121]: (check1by1 ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (rst1 (drSr ; ; duSr))) })):Indicator
---> (check1by1 ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (if (drSr :is Val) then duSr else ((rst1 drSr) ; ; duSr) fi)) })):Indicator
[122]: (check1by1 ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (if (drSr :is Val) then duSr else ((rst1 drSr) ; ; duSr) fi)) })):Indicator
---> (check1by1 ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (if true then duSr else ((rst1 drSr) ; ; duSr) fi)) })):Indicator
[123]: (check1by1 ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , (if true then duSr else ((rst1 drSr) ; ; duSr) fi)) })):Indicator
---> (check1by1 ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , duSr) })):Indicator
[124(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[125(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[126(cond)]: (true xor true):Bool
   --> (false):Bool
[127(cond)]: (not (duSr :is Val)):Bool
   --> ((duSr :is Val) xor true):Bool
[128(cond)]: ((duSr :is Val) xor true):Bool
   --> (true xor true):Bool
[129(cond)]: (true xor true):Bool
   --> (false):Bool
[130(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[131(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[132(cond)]: (true xor true):Bool
   --> (false):Bool
[133(cond)]: (not ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) :is Val)):Bool
   --> (((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) :is Val) xor true):Bool
[134(cond)]: (((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) :is Val) xor true):Bool
   --> (false xor true):Bool
[135(cond)]: (false xor true):Bool
   --> (true):Bool
[136]: (check1by1 ({ ((bv1 , (nv1 , ((empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , rsc))))) , duSr) })):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((fst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[137]: (check1by1 (({ ((bv1 , nv1) , ((fst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((if (empBN :is Val) then empBN else (fst1 empBN) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[138]: (check1by1 (({ ((bv1 , nv1) , ((if (empBN :is Val) then empBN else (fst1 empBN) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((if true then empBN else (fst1 empBN) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[139]: (check1by1 (({ ((bv1 , nv1) , ((if true then empBN else (fst1 empBN) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[140(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[141(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[142(cond)]: (true xor true):Bool
   --> (false):Bool
[143(cond)]: (not (duSr :is Val)):Bool
   --> ((duSr :is Val) xor true):Bool
[144(cond)]: ((duSr :is Val) xor true):Bool
   --> (true xor true):Bool
[145(cond)]: (true xor true):Bool
   --> (false):Bool
[146(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[147(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[148(cond)]: (true xor true):Bool
   --> (false):Bool
[149(cond)]: (not (empBN :is Val)):Bool
   --> ((empBN :is Val) xor true):Bool
[150(cond)]: ((empBN :is Val) xor true):Bool
   --> (true xor true):Bool
[151(cond)]: (true xor true):Bool
   --> (false):Bool
[152(cond)]: (not (bv3 :is Val)):Bool
   --> ((bv3 :is Val) xor true):Bool
[153(cond)]: ((bv3 :is Val) xor true):Bool
   --> (true xor true):Bool
[154(cond)]: (true xor true):Bool
   --> (false):Bool
[155(cond)]: (not (ns :is Val)):Bool
   --> ((ns :is Val) xor true):Bool
[156(cond)]: ((ns :is Val) xor true):Bool
   --> (true xor true):Bool
[157(cond)]: (true xor true):Bool
   --> (false):Bool
[158(cond)]: (not (rsc :is Val)):Bool
   --> ((rsc :is Val) xor true):Bool
[159(cond)]: ((rsc :is Val) xor true):Bool
   --> (true xor true):Bool
[160(cond)]: (true xor true):Bool
   --> (false):Bool
[161(cond)]: (not ((({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn)):Bool
   --> (((({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn) xor true):Bool
[162(cond)]: (((({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn) xor true):Bool
   --> (false xor true):Bool
[163(cond)]: (false xor true):Bool
   --> (true):Bool
[164]: (check1by1 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (if true?((mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[165]: (if true?((mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq (if (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[166]: (if true?((mi (getVsq (if (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq (if true then ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[167]: (if true?((mi (getVsq (if true then ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) })))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[168]: (if true?((mi (getVsq ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) })))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[169]: (if true?((mi ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[170]: (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[171]: (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[172]: (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[173]: (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[174(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[175(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[176(cond)]: (true xor true):Bool
   --> (false):Bool
[177]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[178]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[179]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[180]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[181]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[182]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[183]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[184]: (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[185]: (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[186]: (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[187]: (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[188]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[189]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[190]: (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[191]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[192]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[193]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[194]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[195]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[196]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[197]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[198]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[199]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[200]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[201]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[202]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[203]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[204]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(((srCh: empBN) ((sBit: bv1) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc)))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[205]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1((((srCh: empBN) (sBit: bv1)) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[206]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[207(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[208(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[209(cond)]: (true xor true):Bool
   --> (false):Bool
[210]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[211]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[212]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[213]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[214]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[215]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[216]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[217]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[218]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[219]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[220]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[221]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[222]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[223]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[224]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[225]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[226]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[227]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[228]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[229]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[230]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[231]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[232]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[233]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[234]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[235]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[236]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[237]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[238]: (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[239]: (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[240]: (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: empBN) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if (true == true) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[241]: (if (true == true) then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[242]: (if true then (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):Indicator
---> (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))):Indicator
[243]: (check1by1 (rst2 (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })))):Indicator
---> (check1by1 (if (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
[244]: (check1by1 (if (({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
---> (check1by1 (if true then ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
[245]: (check1by1 (if true then ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , (empBN , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[246]: (check1by1 ({ ((bv1 , nv1) , ((rst1 (empBN ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((if (empBN :is Val) then (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) else ((rst1 empBN) ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[247]: (check1by1 ({ ((bv1 , nv1) , ((if (empBN :is Val) then (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) else ((rst1 empBN) ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((if true then (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) else ((rst1 empBN) ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[248]: (check1by1 ({ ((bv1 , nv1) , ((if true then (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) else ((rst1 empBN) ; ; (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[249(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[250(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[251(cond)]: (true xor true):Bool
   --> (false):Bool
[252(cond)]: (not (duSr :is Val)):Bool
   --> ((duSr :is Val) xor true):Bool
[253(cond)]: ((duSr :is Val) xor true):Bool
   --> (true xor true):Bool
[254(cond)]: (true xor true):Bool
   --> (false):Bool
[255(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[256(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[257(cond)]: (true xor true):Bool
   --> (false):Bool
[258(cond)]: (not ((bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) :is Val)):Bool
   --> (((bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) :is Val) xor true):Bool
[259(cond)]: (((bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) :is Val) xor true):Bool
   --> (false xor true):Bool
[260(cond)]: (false xor true):Bool
   --> (true):Bool
[261]: (check1by1 ({ ((bv1 , nv1) , ((bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((fst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[262]: (check1by1 (({ ((bv1 , nv1) , ((fst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((if (bn(bv2,nv2) :is Val) then bn(bv2,nv2) else (fst1 bn(bv2,nv2)) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[263]: (check1by1 (({ ((bv1 , nv1) , ((if (bn(bv2,nv2) :is Val) then bn(bv2,nv2) else (fst1 bn(bv2,nv2)) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((if true then bn(bv2,nv2) else (fst1 bn(bv2,nv2)) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[264]: (check1by1 (({ ((bv1 , nv1) , ((if true then bn(bv2,nv2) else (fst1 bn(bv2,nv2)) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[265(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[266(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[267(cond)]: (true xor true):Bool
   --> (false):Bool
[268(cond)]: (not (duSr :is Val)):Bool
   --> ((duSr :is Val) xor true):Bool
[269(cond)]: ((duSr :is Val) xor true):Bool
   --> (true xor true):Bool
[270(cond)]: (true xor true):Bool
   --> (false):Bool
[271(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[272(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[273(cond)]: (true xor true):Bool
   --> (false):Bool
[274(cond)]: (not (bn(bv2,nv2) :is Val)):Bool
   --> ((bn(bv2,nv2) :is Val) xor true):Bool
[275(cond)]: ((bn(bv2,nv2) :is Val) xor true):Bool
   --> (true xor true):Bool
[276(cond)]: (true xor true):Bool
   --> (false):Bool
[277(cond)]: (not (bv3 :is Val)):Bool
   --> ((bv3 :is Val) xor true):Bool
[278(cond)]: ((bv3 :is Val) xor true):Bool
   --> (true xor true):Bool
[279(cond)]: (true xor true):Bool
   --> (false):Bool
[280(cond)]: (not (ns :is Val)):Bool
   --> ((ns :is Val) xor true):Bool
[281(cond)]: ((ns :is Val) xor true):Bool
   --> (true xor true):Bool
[282(cond)]: (true xor true):Bool
   --> (false):Bool
[283(cond)]: (not (rsc :is Val)):Bool
   --> ((rsc :is Val) xor true):Bool
[284(cond)]: ((rsc :is Val) xor true):Bool
   --> (true xor true):Bool
[285(cond)]: (true xor true):Bool
   --> (false):Bool
[286(cond)]: (not ((({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn)):Bool
   --> (((({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn) xor true):Bool
[287(cond)]: (((({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn) xor true):Bool
   --> (false xor true):Bool
[288(cond)]: (false xor true):Bool
   --> (true):Bool
[289]: (check1by1 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (if true?((mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[290]: (if true?((mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq (if (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[291]: (if true?((mi (getVsq (if (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq (if true then ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[292]: (if true?((mi (getVsq (if true then ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) })))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[293]: (if true?((mi (getVsq ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) })))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[294]: (if true?((mi ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[295]: (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[296]: (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[297]: (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[298]: (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[299(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[300(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[301(cond)]: (true xor true):Bool
   --> (false):Bool
[302]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[303]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[304]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[305]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[306]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[307]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[308]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[309]: (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[310]: (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[311]: (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[312]: (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[313]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[314]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[315]: (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[316]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[317]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[318]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[319]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[320]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[321]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[322]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[323]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[324]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[325]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[326]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[327]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[328]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[329]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(((srCh: (bn(bv2,nv2) bn(bv2,nv2))) ((sBit: bv1) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc)))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[330]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1((((srCh: (bn(bv2,nv2) bn(bv2,nv2))) (sBit: bv1)) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[331]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[332(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[333(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[334(cond)]: (true xor true):Bool
   --> (false):Bool
[335]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[336]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[337]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[338]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[339]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[340]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[341]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[342]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[343]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[344]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[345]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[346]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[347]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[348]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[349]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[350]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[351]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[352]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[353]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[354]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[355]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[356]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[357]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[358]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[359]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[360]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[361]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[362]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[363]: (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[364]: (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[365]: (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: bn(bv2,nv2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if (true == true) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[366]: (if (true == true) then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[367]: (if true then (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):Indicator
---> (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))):Indicator
[368]: (check1by1 (rst2 (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })))):Indicator
---> (check1by1 (if (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
[369]: (check1by1 (if (({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
---> (check1by1 (if true then ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
[370]: (check1by1 (if true then ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , (bn(bv2,nv2) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[371]: (check1by1 ({ ((bv1 , nv1) , ((rst1 (bn(bv2,nv2) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((if (bn(bv2,nv2) :is Val) then ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) else ((rst1 bn(bv2,nv2)) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[372]: (check1by1 ({ ((bv1 , nv1) , ((if (bn(bv2,nv2) :is Val) then ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) else ((rst1 bn(bv2,nv2)) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((if true then ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) else ((rst1 bn(bv2,nv2)) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[373]: (check1by1 ({ ((bv1 , nv1) , ((if true then ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) else ((rst1 bn(bv2,nv2)) ; ; ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , (((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[374(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[375(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[376(cond)]: (true xor true):Bool
   --> (false):Bool
[377(cond)]: (not (duSr :is Val)):Bool
   --> ((duSr :is Val) xor true):Bool
[378(cond)]: ((duSr :is Val) xor true):Bool
   --> (true xor true):Bool
[379(cond)]: (true xor true):Bool
   --> (false):Bool
[380(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[381(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[382(cond)]: (true xor true):Bool
   --> (false):Bool
[383(cond)]: (not (((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) :is Val)):Bool
   --> ((((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) :is Val) xor true):Bool
[384(cond)]: ((((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) :is Val) xor true):Bool
   --> (false xor true):Bool
[385(cond)]: (false xor true):Bool
   --> (true):Bool
[386]: (check1by1 ({ ((bv1 , nv1) , (((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((fst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[387]: (check1by1 (({ ((bv1 , nv1) , ((fst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((if ((src1 bn(bv2,nv2)) :is Val) then (src1 bn(bv2,nv2)) else (fst1 (src1 bn(bv2,nv2))) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[388]: (check1by1 (({ ((bv1 , nv1) , ((if ((src1 bn(bv2,nv2)) :is Val) then (src1 bn(bv2,nv2)) else (fst1 (src1 bn(bv2,nv2))) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((if true then (src1 bn(bv2,nv2)) else (fst1 (src1 bn(bv2,nv2))) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[389]: (check1by1 (({ ((bv1 , nv1) , ((if true then (src1 bn(bv2,nv2)) else (fst1 (src1 bn(bv2,nv2))) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[390(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[391(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[392(cond)]: (true xor true):Bool
   --> (false):Bool
[393(cond)]: (not (duSr :is Val)):Bool
   --> ((duSr :is Val) xor true):Bool
[394(cond)]: ((duSr :is Val) xor true):Bool
   --> (true xor true):Bool
[395(cond)]: (true xor true):Bool
   --> (false):Bool
[396(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[397(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[398(cond)]: (true xor true):Bool
   --> (false):Bool
[399(cond)]: (not ((src1 bn(bv2,nv2)) :is Val)):Bool
   --> (((src1 bn(bv2,nv2)) :is Val) xor true):Bool
[400(cond)]: (((src1 bn(bv2,nv2)) :is Val) xor true):Bool
   --> (true xor true):Bool
[401(cond)]: (true xor true):Bool
   --> (false):Bool
[402(cond)]: (not (bv3 :is Val)):Bool
   --> ((bv3 :is Val) xor true):Bool
[403(cond)]: ((bv3 :is Val) xor true):Bool
   --> (true xor true):Bool
[404(cond)]: (true xor true):Bool
   --> (false):Bool
[405(cond)]: (not (ns :is Val)):Bool
   --> ((ns :is Val) xor true):Bool
[406(cond)]: ((ns :is Val) xor true):Bool
   --> (true xor true):Bool
[407(cond)]: (true xor true):Bool
   --> (false):Bool
[408(cond)]: (not (rsc :is Val)):Bool
   --> ((rsc :is Val) xor true):Bool
[409(cond)]: ((rsc :is Val) xor true):Bool
   --> (true xor true):Bool
[410(cond)]: (true xor true):Bool
   --> (false):Bool
[411(cond)]: (not ((({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn)):Bool
   --> (((({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn) xor true):Bool
[412(cond)]: (((({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn) xor true):Bool
   --> (false xor true):Bool
[413(cond)]: (false xor true):Bool
   --> (true):Bool
[414]: (check1by1 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (if true?((mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[415]: (if true?((mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq (if (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[416]: (if true?((mi (getVsq (if (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq (if true then ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[417]: (if true?((mi (getVsq (if true then ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) })))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[418]: (if true?((mi (getVsq ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) })))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[419]: (if true?((mi ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[420]: (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[421]: (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[422]: (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[423]: (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[424(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[425(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[426(cond)]: (true xor true):Bool
   --> (false):Bool
[427]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[428]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[429]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[430]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[431]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[432]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[433]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[434]: (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[435]: (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[436]: (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[437]: (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[438]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[439]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[440]: (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[441]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[442]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[443]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[444]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[445]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[446]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[447]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[448]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[449]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[450]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[451]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[452]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[453]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[454]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(((srCh: (src1 (bn(bv2,nv2) bn(bv2,nv2)))) ((sBit: bv1) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc)))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[455]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1((((srCh: (src1 (bn(bv2,nv2) bn(bv2,nv2)))) (sBit: bv1)) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[456]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[457(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[458(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[459(cond)]: (true xor true):Bool
   --> (false):Bool
[460]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[461]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[462]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[463]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[464]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[465]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[466]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[467]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[468]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[469]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[470]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[471]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[472]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[473]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[474]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[475]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[476]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[477]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[478]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[479]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[480]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[481]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[482]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[483]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[484]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[485]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[486]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[487]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[488]: (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[489]: (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[490]: (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 bn(bv2,nv2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if (true == true) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[491]: (if (true == true) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[492]: (if true then (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):Indicator
---> (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))):Indicator
[493]: (check1by1 (rst2 (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })))):Indicator
---> (check1by1 (if (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
[494]: (check1by1 (if (({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
---> (check1by1 (if true then ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
[495]: (check1by1 (if true then ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , ((src1 bn(bv2,nv2)) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[496]: (check1by1 ({ ((bv1 , nv1) , ((rst1 ((src1 bn(bv2,nv2)) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((if ((src1 bn(bv2,nv2)) :is Val) then ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))) else ((rst1 (src1 bn(bv2,nv2))) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[497]: (check1by1 ({ ((bv1 , nv1) , ((if ((src1 bn(bv2,nv2)) :is Val) then ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))) else ((rst1 (src1 bn(bv2,nv2))) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((if true then ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))) else ((rst1 (src1 bn(bv2,nv2))) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[498]: (check1by1 ({ ((bv1 , nv1) , ((if true then ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))) else ((rst1 (src1 bn(bv2,nv2))) ; ; ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , (((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[499(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[500(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[501(cond)]: (true xor true):Bool
   --> (false):Bool
[502(cond)]: (not (duSr :is Val)):Bool
   --> ((duSr :is Val) xor true):Bool
[503(cond)]: ((duSr :is Val) xor true):Bool
   --> (true xor true):Bool
[504(cond)]: (true xor true):Bool
   --> (false):Bool
[505(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[506(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[507(cond)]: (true xor true):Bool
   --> (false):Bool
[508(cond)]: (not (((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))) :is Val)):Bool
   --> ((((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))) :is Val) xor true):Bool
[509(cond)]: ((((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))) :is Val) xor true):Bool
   --> (false xor true):Bool
[510(cond)]: (false xor true):Bool
   --> (true):Bool
[511]: (check1by1 ({ ((bv1 , nv1) , (((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((fst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[512]: (check1by1 (({ ((bv1 , nv1) , ((fst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((if ((bn(bv2,nv2) src2) :is Val) then (bn(bv2,nv2) src2) else (fst1 (bn(bv2,nv2) src2)) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[513]: (check1by1 (({ ((bv1 , nv1) , ((if ((bn(bv2,nv2) src2) :is Val) then (bn(bv2,nv2) src2) else (fst1 (bn(bv2,nv2) src2)) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((if true then (bn(bv2,nv2) src2) else (fst1 (bn(bv2,nv2) src2)) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[514]: (check1by1 (({ ((bv1 , nv1) , ((if true then (bn(bv2,nv2) src2) else (fst1 (bn(bv2,nv2) src2)) fi) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (check1by1 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
[515(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[516(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[517(cond)]: (true xor true):Bool
   --> (false):Bool
[518(cond)]: (not (duSr :is Val)):Bool
   --> ((duSr :is Val) xor true):Bool
[519(cond)]: ((duSr :is Val) xor true):Bool
   --> (true xor true):Bool
[520(cond)]: (true xor true):Bool
   --> (false):Bool
[521(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[522(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[523(cond)]: (true xor true):Bool
   --> (false):Bool
[524(cond)]: (not ((bn(bv2,nv2) src2) :is Val)):Bool
   --> (((bn(bv2,nv2) src2) :is Val) xor true):Bool
[525(cond)]: (((bn(bv2,nv2) src2) :is Val) xor true):Bool
   --> (true xor true):Bool
[526(cond)]: (true xor true):Bool
   --> (false):Bool
[527(cond)]: (not (bv3 :is Val)):Bool
   --> ((bv3 :is Val) xor true):Bool
[528(cond)]: ((bv3 :is Val) xor true):Bool
   --> (true xor true):Bool
[529(cond)]: (true xor true):Bool
   --> (false):Bool
[530(cond)]: (not (ns :is Val)):Bool
   --> ((ns :is Val) xor true):Bool
[531(cond)]: ((ns :is Val) xor true):Bool
   --> (true xor true):Bool
[532(cond)]: (true xor true):Bool
   --> (false):Bool
[533(cond)]: (not (rsc :is Val)):Bool
   --> ((rsc :is Val) xor true):Bool
[534(cond)]: ((rsc :is Val) xor true):Bool
   --> (true xor true):Bool
[535(cond)]: (true xor true):Bool
   --> (false):Bool
[536(cond)]: (not ((({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn)):Bool
   --> (((({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn) xor true):Bool
[537(cond)]: (((({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })) :is VtSqEn) xor true):Bool
   --> (false xor true):Bool
[538(cond)]: (false xor true):Bool
   --> (true):Bool
[539]: (check1by1 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))):Indicator
---> (if true?((mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[540]: (if true?((mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq (if (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[541]: (if true?((mi (getVsq (if (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq (if true then ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[542]: (if true?((mi (getVsq (if true then ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) else (fst2 ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) })) fi)))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi (getVsq ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) })))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[543]: (if true?((mi (getVsq ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) })))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?((mi ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[544]: (if true?((mi ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))))) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[545]: (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[546]: (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[547]: (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[548]: (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[549(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[550(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[551(cond)]: (true xor true):Bool
   --> (false):Bool
[552]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[553]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[554]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[555]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[556]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[557]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[558]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[559]: (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[560]: (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[561]: (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[562]: (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[563]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[564]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[565]: (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[566]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[567]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[568]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[569]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[570]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[571]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[572]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[573]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[574]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[575]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[576]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[577]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[578]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[579]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(((srCh: ((bn(bv2,nv2) bn(bv2,nv2)) src2)) ((sBit: bv1) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc)))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[580]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1((((srCh: ((bn(bv2,nv2) bn(bv2,nv2)) src2)) (sBit: bv1)) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[581]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[582(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[583(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[584(cond)]: (true xor true):Bool
   --> (false):Bool
[585]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[586]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[587]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[588]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[589]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[590]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[591]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[592]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[593]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[594]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[595]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[596]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[597]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[598]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[599]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[600]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[601]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[602]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[603]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[604]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[605]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[606]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[607]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[608]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[609]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[610]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[611]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[612]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[613]: (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[614]: (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[615]: (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: (bn(bv2,nv2) src2)) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if (true == true) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[616]: (if (true == true) then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
---> (if true then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):*Cosmos*
[617]: (if true then (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))) else (mi (getVsq (fst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }))))) fi):Indicator
---> (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))):Indicator
[618]: (check1by1 (rst2 (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })))):Indicator
---> (check1by1 (if (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
[619]: (check1by1 (if (({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) then ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
---> (check1by1 (if true then ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
[620]: (check1by1 (if true then ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) }) else ((rst2 ({ ((bv1 , nv1) , ((bn(bv2,nv2) src2) , (bv3 , (ns , (rsc , duSr))))) })) !! ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })) fi)):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[621]: (check1by1 ({ ((bv1 , nv1) , ((rst1 ((bn(bv2,nv2) src2) ; ; (src1 (bn(bv2,nv2) src2)))) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((if ((bn(bv2,nv2) src2) :is Val) then (src1 (bn(bv2,nv2) src2)) else ((rst1 (bn(bv2,nv2) src2)) ; ; (src1 (bn(bv2,nv2) src2))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[622]: (check1by1 ({ ((bv1 , nv1) , ((if ((bn(bv2,nv2) src2) :is Val) then (src1 (bn(bv2,nv2) src2)) else ((rst1 (bn(bv2,nv2) src2)) ; ; (src1 (bn(bv2,nv2) src2))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((if true then (src1 (bn(bv2,nv2) src2)) else ((rst1 (bn(bv2,nv2) src2)) ; ; (src1 (bn(bv2,nv2) src2))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[623]: (check1by1 ({ ((bv1 , nv1) , ((if true then (src1 (bn(bv2,nv2) src2)) else ((rst1 (bn(bv2,nv2) src2)) ; ; (src1 (bn(bv2,nv2) src2))) fi) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (check1by1 ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[624(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[625(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[626(cond)]: (true xor true):Bool
   --> (false):Bool
[627(cond)]: (not (duSr :is Val)):Bool
   --> ((duSr :is Val) xor true):Bool
[628(cond)]: ((duSr :is Val) xor true):Bool
   --> (true xor true):Bool
[629(cond)]: (true xor true):Bool
   --> (false):Bool
[630(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[631(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[632(cond)]: (true xor true):Bool
   --> (false):Bool
[633(cond)]: (not ((src1 (bn(bv2,nv2) src2)) :is Val)):Bool
   --> (((src1 (bn(bv2,nv2) src2)) :is Val) xor true):Bool
[634(cond)]: (((src1 (bn(bv2,nv2) src2)) :is Val) xor true):Bool
   --> (true xor true):Bool
[635(cond)]: (true xor true):Bool
   --> (false):Bool
[636(cond)]: (not (bv3 :is Val)):Bool
   --> ((bv3 :is Val) xor true):Bool
[637(cond)]: ((bv3 :is Val) xor true):Bool
   --> (true xor true):Bool
[638(cond)]: (true xor true):Bool
   --> (false):Bool
[639(cond)]: (not (ns :is Val)):Bool
   --> ((ns :is Val) xor true):Bool
[640(cond)]: ((ns :is Val) xor true):Bool
   --> (true xor true):Bool
[641(cond)]: (true xor true):Bool
   --> (false):Bool
[642(cond)]: (not (rsc :is Val)):Bool
   --> ((rsc :is Val) xor true):Bool
[643(cond)]: ((rsc :is Val) xor true):Bool
   --> (true xor true):Bool
[644(cond)]: (true xor true):Bool
   --> (false):Bool
[645(cond)]: (not (({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn)):Bool
   --> ((({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) xor true):Bool
[646(cond)]: ((({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr))))) }) :is VtSqEn) xor true):Bool
   --> (true xor true):Bool
[647(cond)]: (true xor true):Bool
   --> (false):Bool
(check1by1 ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
(0.010 sec for parse, 647 rewrites(1.810 sec), 28220 matches)
                  check1by1_:Indicator                                                            
                            |                                                                      
                       {_}:VtSqEn                                                                 
                            |                                                                      
                        _,_:VtSq                                                                  
       /                                          \                                                
   _,_:ValSq                                  _,_:VtSq                                            
   /        \                   /                                    \                             
bv1:Bit  nv1:Nat             __:SRch                             _,_:ValSq                        
                      /                    \                 /                \                    
                  src1:SRch             __:SRch           bv3:Bit         _,_:ValSq               
                                    /              \                  /               \            
                                bn:BNpair      src2:SRch           ns:Nseq        _,_:ValSq       
                                /        \                                      /           \      
                             bv2:Bit  nv2:Nat                               rsc:RSch  duSr:EventLt
                                                                                                   
%CHKcss(TS <= ABPprop{ ... })> parse src .
[Error] no successful parse
  
((src)):SyntaxErr
%CHKcss(TS <= ABPprop{ ... })> parse rsc .
(rsc):RSch
%CHKcss(TS <= ABPprop{ ... })> red rsc :is Val .
-- reduce in %CHKcss(TS <= ABPprop{ ... }) : (rsc :is Val):Bool
(true):Bool
(0.000 sec for parse, 1 rewrites(0.000 sec), 1 matches)
%CHKcss(TS <= ABPprop{ ... })> set trace whole on
%CHKcss(TS <= ABPprop{ ... })> red (check1by1 ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr))))) })) .
-- reduce in %CHKcss(TS <= ABPprop{ ... }) : (check1by1 ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
[1(cond)]: (not (bv1 :is Val)):Bool
   --> ((bv1 :is Val) xor true):Bool
[2(cond)]: ((bv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[3(cond)]: (true xor true):Bool
   --> (false):Bool
[4(cond)]: (not (duSr :is Val)):Bool
   --> ((duSr :is Val) xor true):Bool
[5(cond)]: ((duSr :is Val) xor true):Bool
   --> (true xor true):Bool
[6(cond)]: (true xor true):Bool
   --> (false):Bool
[7(cond)]: (not (nv1 :is Val)):Bool
   --> ((nv1 :is Val) xor true):Bool
[8(cond)]: ((nv1 :is Val) xor true):Bool
   --> (true xor true):Bool
[9(cond)]: (true xor true):Bool
   --> (false):Bool
[10(cond)]: (not ((src1 (bn(bv2,nv2) src2)) :is Val)):Bool
   --> (((src1 (bn(bv2,nv2) src2)) :is Val) xor true):Bool
[11(cond)]: (((src1 (bn(bv2,nv2) src2)) :is Val) xor true):Bool
   --> (true xor true):Bool
[12(cond)]: (true xor true):Bool
   --> (false):Bool
[13(cond)]: (not (bv3 :is Val)):Bool
   --> ((bv3 :is Val) xor true):Bool
[14(cond)]: ((bv3 :is Val) xor true):Bool
   --> (true xor true):Bool
[15(cond)]: (true xor true):Bool
   --> (false):Bool
[16(cond)]: (not (ns :is Val)):Bool
   --> ((ns :is Val) xor true):Bool
[17(cond)]: ((ns :is Val) xor true):Bool
   --> (true xor true):Bool
[18(cond)]: (true xor true):Bool
   --> (false):Bool
[19(cond)]: (not (rsc :is Val)):Bool
   --> ((rsc :is Val) xor true):Bool
[20(cond)]: ((rsc :is Val) xor true):Bool
   --> (true xor true):Bool
[21(cond)]: (true xor true):Bool
   --> (false):Bool
[22]: (check1by1 ({ ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr))))) })):Indicator
---> (if true?((mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr))))))) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[23]: (if true?((mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr))))))) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[24]: (if true?(i(ppp((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[25]: (if true?(i((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) implies p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[26]: (if true?(i(((p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (p1((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[27]: (if true?(i((((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[28(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[29(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[30(cond)]: (true xor true):Bool
   --> (false):Bool
[31]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[32]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[33]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[34]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[35]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[36]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[37]: (if true?(i(((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[38]: (if true?(i((((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[39]: (if true?(i(((((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[40]: (if true?(i((((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[41]: (if true?(i((((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[42]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[43]: (if true?(i((((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[44]: (if true?(i(((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor (((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[45]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[46]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[47]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[48]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[49]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[50]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[51]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[52]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[53]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[54]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3)))))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[55]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[56]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[57]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false)) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[58]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(trans((((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1(((srCh: (src1 ((bn(bv2,nv2) bn(bv2,nv2)) src2))) ((sBit: bv1) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc)))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[59]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and p1((((srCh: (src1 ((bn(bv2,nv2) bn(bv2,nv2)) src2))) (sBit: bv1)) ((sNum: nv1) ((rBit: bv3) ((rNums: ns) (rsCh: rsc))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[60]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) implies (mk(nv1) = (nv1 ns))) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[61(cond)]: (not (nv1 = nv1)):Bool
   --> ((nv1 = nv1) xor true):Bool
[62(cond)]: ((nv1 = nv1) xor true):Bool
   --> (true xor true):Bool
[63(cond)]: (true xor true):Bool
   --> (false):Bool
[64]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((not (bv1 = bv3)) implies (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[65]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((not (bv1 = bv3)) and (mk(nv1) = ns)) xor ((not (bv1 = bv3)) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[66]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((bv1 = bv3) xor true) and (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[67]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and true)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[68]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor (((bv1 = bv3) xor true) xor true)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[69]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[70]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) xor (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[71]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[72]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((bv1 = bv3) and (bv1 = bv3)) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[73]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor ((bv1 = bv3) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[74]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((bv1 = bv3) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[75]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((bv1 = bv3) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[76]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((bv1 = bv3) xor (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (bv1 = bv3))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[77]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor false) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[78]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[79]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and (mk(nv1) = ns)) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[80]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[81]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor ((mk(nv1) = ns) and true))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[82]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor ((bv1 = bv3) xor true)) and ((mk(nv1) = ns) and (bv1 = bv3)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[83]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[84]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and (((bv1 = bv3) and (mk(nv1) = (nv1 ns))) xor true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[85]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[86]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) and true)))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[87]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor ((mk(nv1) = ns) and (bv1 = bv3))))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[88]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor ((((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3)) xor false)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[89]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (((mk(nv1) = ns) and ((bv1 = bv3) and (mk(nv1) = (nv1 ns)))) xor (mk(nv1) = ns))) xor (((mk(nv1) = ns) and (mk(nv1) = (nv1 ns))) and (bv1 = bv3))))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[90]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor ((((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)) xor false))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[91]: (if true?(i((((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) and (((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns)))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[92]: (if true?(i(((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor ((((mk(nv1) = (nv1 ns)) and (bv1 = bv3)) xor (((mk(nv1) = ns) and (bv1 = bv3)) xor (mk(nv1) = ns))) xor true)),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[93]: (if true?(i((true xor false),(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[94]: (if true?(i(true,(((sBit: bv1) (sNum: nv1)) (((srCh: (src1 (bn(bv2,nv2) src2))) (rBit: bv3)) ((rNums: ns) (rsCh: rsc)))),duSr)) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if (true == true) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[95]: (if (true == true) then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
---> (if true then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):*Cosmos*
[96]: (if true then $ else (mi ((bv1 , nv1) , ((src1 (bn(bv2,nv2) src2)) , (bv3 , (ns , (rsc , duSr)))))) fi):Indicator
---> ($):Indicator
($):Indicator
(0.000 sec for parse, 96 rewrites(0.210 sec), 5587 matches)
%CHKcss(TS <= ABPprop{ ... })> 
