<?xml version="1.0" encoding="utf-8"?>
<book xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
  <info>
    <title>CafeOBJ Manual</title>
    <author>
      <personname>
	<firstname>Ataru</firstname>
	<surname>Nakagawa</surname>
      </personname>
    </author>
    <author>
      <personname>
	<firstname>Toshimi</firstname>
	<surname>Sawada</surname>
      </personname>
    </author>
    <author>
      <personname>
	<firstname>Kokichi</firstname>
	<surname>Futatsugi</surname>
      </personname>
    </author>
    <author>
      <personname>
	<firstname>Norbert</firstname>
	<surname>Preining</surname>
      </personname>
    </author>
  </info>
  <chapter>
    <title>Introduction</title>
    <para>
      \cafeobj~is a specification language based on three-way
      extensions to many-sorted equational logic: the underlying logic
      is order-sorted, not just many-sorted; it admits unidiretional
      transitions, as well as equations; it also accommodates hidden
      sorts, on top of ordinary, visible sorts. A subset of
      \cafeobj~is executable, where the operational semantics is given
      by a conditional order-sorted term rewriting system. These
      theoretical bases are indispensable to employ
      \cafeobj~properly. Fortunately, there is an ample literature on
      these subjects, and we are able to refer the reader to, e.g.,
      \cite{e-m85}, \cite{m-g82} (for basics of algebraic
      specifications), \cite{osa}, \cite{osa-survey} (for order-sorted
      logic), \cite{hsa} (for hidden sorts), \cite{eatcs-coalg} (for
      coinduction), \cite{rew-logic} (for rewriting logic),
      \cite{institution} (for institutions), and \cite{trs-eatcs},
      \cite{trs-handbook} (for term rewriting systems), as
      primers. The logical aspects of \cafeobj~are explained in detail
      in \cite{razvan96-1} and \cite{cafeobj-rep}. This manual is for
      the initiated, and we sometimes abandon the theoretical rigour
      for the sake of intuitiveness. 
    </para>
    <para>
      For a very brief introduction, we just highlight a couple of
      features of \cafeobj. \cafeobj~is an offspring of the family of
      algebraic specification techniques. A specification is a text,
      usually of formal syntax. It denotes an algebraic system
      constructed out of sorts (or data types) and sorted (or typed)
      operators. The system is characterised by the axioms in the
      specification. An axiom was traditionally a plain equation
      (``essentially algebraic''), but is now construed much more
      broadly. For example, \cafeobj~accommodates conditional
      equations, directed transitions, and (limited) use of
      disequality. 
    </para>
    <para>
      The underlying logic of \cafeobj~is as follows
      <footnote><para>Some of
      the authors feel that some of these technical terms are
      queer. But to avoid confusion, we basically keep to the
      established terminology.</para></footnote>.
      <itemizedlist>
	<listitem><para>
	  \textbf{ Order-sorted logic}\cite{osa}. A sort may be
	  a subset of another sort. For example, natural numbers may
	  be embedded into rationals. This embedding makes valid the
	  assertion that 3 equals 6/2. It also realises ``operator
	  inheritance'', in the sense that an operator declared on
	  rationals are automatically declared on natural
	  numbers. Moreover, the subsort relation offers you a simple
	  way to define  partial operations and exception handling.
	</para></listitem>
	<listitem><para>
	  \textbf{ Rewriting logic}\cite{rew-logic}. In addition
	  to equality, which is subject to the law of symmetry, you may
	  use transition relations, which are directed in one way
	  only. State transitions are naturally formalised by those
	  relations. In particular, transition relations are useful to
	  represent concurrency and/or indeterminacy.
	</para></listitem>
	<listitem><para>
	  \textbf{ Hidden sorts}\cite{hsa}. You have two kinds of
	  equivalence. One is a minimal equivalence, that identifies terms
	  (elements) iff they are the same under the given equational
	  theory. Another equivalence, employed for so-called hidden
	  sorts, is behavioural: two terms are equivalent iff they behave
	  identically under the  given set of observations.
	</para></listitem>
      </itemizedlist>
    </para>
    
    <para>
      We would also like to emphasise a very useful feature of
      \cafeobj. 
      <itemizedlist>
	<listitem><para>
	  \textbf{ Parameters}. There are many sorts that are
	  inherently generic. Stacks, lists, sets and so on have
	  operations that act independently of the properties of base
	  (``data'') elements. A more tricky case is priority queues,
	  which require base elements to have an order relation. You may
	  define these sorts by parameterised modules, where base elements
	  are parameterised out. A parameter may be subject to
	  constraints. For example, the parameter of a priority queue
	  module may be declared an ordered set, not an arbitrary set. 
	</para></listitem>
      </itemizedlist>
    </para>

    <section>
      <title>Legends</title>
      <para>
	Restrictions, particulars, and prejudices of the current
	implementation shall be highlighted by preceding \emph{!!}, as 
	<warning><para>
	  Woe betide those who do not heed this warning!
	</para></warning>
	while syntactical definitions are shown as
      </para>
    </section>
  </chapter>
</book>

